#!/bin/bash




clear
echo "Settings:"
echo "========="
echo "domain:"
echo $DOMAIN
echo "db password:"
echo $DB_PASSWORD
echo "db user:"
echo $DB_USER
echo "secret key:"
echo $SECRET_KEY
echo "install DANCE? (y/n)"
read continue
if [[ $continue = "y" ]]
then


echo "Installing venv==============================="
python3 -m venv venv
source venv/bin/activate
pip install pip --upgrade
pip install setuptools --upgrade
pip install -r requirements.txt
pip install gunicorn
echo "Installing venv complete======================"


echo "Create database and user======================"
sudo mysql<<EOF
CREATE DATABASE $DB_USER CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASSWORD';
GRANT ALL PRIVILEGES ON $DB_USER.* TO '$DB_USER'@'localhost';
FLUSH PRIVILEGES;
EOF
echo "Created database and user====================="


echo "Setting environment variables================="
bash -c  'cat > .env' << EOL
SECRET_KEY = $SECRET_KEY

DATABASE_URI = "mysql+pymysql://$DB_USER:$DB_PASSWORD@localhost:3306/$DB_USER?charset=utf8mb4"

PRETTY_URL = "$DOMAIN"
ALLOWED_URLS = ["https://$DOMAIN"]

TOURNAMENT = "xTDS"
EOL
echo "Setting environment variables done============"


echo "Migrating database============================"
flask db upgrade
deactivate
echo "Database migration complete==================="


echo "Setting up supervisor========================="
sudo -E bash -c 'cat > /etc/supervisor/conf.d/$DB_USER.conf' << EOL
[program:$DB_USER]
command=/home/$USER/DANCE/venv/bin/gunicorn -b 127.0.0.1:8200 -w 3 run:app
directory=/home/$USER/DANCE
user=$USER
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
EOL
sudo supervisorctl reload
echo "Setting up supervisor complete================"


echo "Setting up nginx for backend=================="
sudo -E bash -c 'cat > /etc/nginx/conf.d/api.$DOMAIN.conf' << EOL
server {
    listen 443 ssl http2;
    server_name api.$DOMAIN;

    location / {
        proxy_pass http://127.0.0.1:8200;
        proxy_redirect off;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    }

    access_log /var/log/api.$DOMAIN.access.log;
    error_log /var/log/api.$DOMAIN.error.log;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    ssl_ecdh_curve secp521r1:secp384r1:prime256v1;

}
server {
    server_name api.$DOMAIN;
    return 301 https://\$host\$request_uri;
}
EOL
sudo service nginx reload
echo "Setting up nginx for backend complete========="


echo "Setting up config============================="
sudo bash -c 'cat > public/config/config.json' << EOL
{
    "api": {
        "url": "https://api.$DOMAIN/api"
    }
}
EOL
echo "Setting up config complete===================="


echo "Building frontend============================="
npm install
npm run build
echo "Building frontend complete===================="


echo "Setting up nginx for frontend================="
sudo -E bash -c 'cat > /etc/nginx/conf.d/$DOMAIN.conf' << EOL
server {
    listen 443 ssl http2;
    server_name $DOMAIN;

    location / {
        root $HOME/DANCE/dist;
        index index.html;
        try_files \$uri \$uri/ /index.html;
    }

    access_log /var/log/$DOMAIN.access.log;
    error_log /var/log/$DOMAIN.error.log;

    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    ssl_ecdh_curve secp521r1:secp384r1:prime256v1;

}
server {
    server_name $DOMAIN;
    return 301 https://\$host\$request_uri;
}
EOL
sudo service nginx reload
echo "Setting up nginx for frontend complete========"


echo "Creating backup folder========================"
mkdir backups
echo "Created backup folder========================="


echo "Creating update scripts======================="
bash -c 'cat > scripts/update_backend' << EOL
echo "Creating database backup===="
./cron/backup
echo "========================Done"
echo "Checking out new version===="
git pull
echo "========================Done"

echo "Installing requirements====="
source venv/bin/activate
pip install -r requirements.txt
echo "========================Done"

echo "Migrating Database=========="
export FLASK_APP=run.py
flask db upgrade
deactivate
echo "========================Done"

echo "Restarting Services========="
sudo supervisorctl restart $DB_USER
sudo systemctl reload nginx
echo "========================Done"
EOL
bash -c 'cat > scripts/update_frontend' << EOL
echo "Checking out new version===="
git pull
echo "========================Done"
echo "Building frontend==========="
npm install
npm run build
echo "========================Done"
echo "Restarting Services========="
sudo systemctl reload nginx
echo "========================Done"
EOL
echo "Created update scripts========================"


echo "Creating cronjob files========================"
mkdir cron
bash -c 'cat > cron/backup' << EOL
#! /bin/bash
cd
mysqldump --login-path=$DB_USER $DB_USER | xz -z > "DANCE/backups/backup-\$(date +%Y%m%d-%H%M).db.xz";
EOL
sudo chmod 774 cron/backup
echo "Created cronjob files========================="

else
echo "Skipping DANCE installation."
fi
cd
